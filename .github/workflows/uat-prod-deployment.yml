name: release-solution-to-uat-prod

# convert solution to managed (using a build PowerPlatform environment for the conversion)
# upload the solution to the GitHub artifacts
# Commented out on:pull_request- workflow should not fire-Testing
on:
  workflow_dispatch:
# on:
#   pull_request:
#     types:
#       - closed
#     branches:
#       - main
      
#   workflow_dispatch:
env:
  DEV_ENVIRONMENT_URL: ${{ secrets.ENVIRONMENT_URL }}
  BUILD_ENVIRONMENT_URL: ${{ secrets.BUILD_ENVIRONMENT_URL }}
  PROD_ENVIRONMENT_URL: ${{ secrets.PRODUCTION_ENVIRONMENT_URL }}
  CLIENT_ID: ${{ secrets.POWERPLATFORM_CLIENT_ID }}
  TENANT_ID: ${{ secrets.POWERPLATFORM_TENANT_ID }}
  SECRET: ${{ secrets.POWERPLATFORMSPN }}
  solution_name: SelfServiceAgent
  solution_shipping_folder: out/ship
  solution_outbound_folder: out/solutions
  solution_source_folder: solutions
  solution_settings_folder: settings
  solution_release_folder: out/release
  UAT_solution_settings_name: DeploymentSettings-UAT.json
  PROD_solution_settings_name: DeploymentSettings-Prod.json
  SOLUTION_VERSION: 1.2.${{ github.run_number }}.0
permissions:
  contents: write

jobs:
  deploy-to-uat:
    runs-on: windows-latest
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Microsoft PowerApps CLI Tool
        run: dotnet tool install --global Microsoft.PowerApps.CLI.Tool
        
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ env.BUILD_ENVIRONMENT_URL }}
          app-id: ${{ env.CLIENT_ID }}
          client-secret: ${{ env.SECRET }}
          tenant-id: ${{ env.TENANT_ID }}

      - name: Pack solution from source control into a solution.zip
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-folder: ${{ env.solution_source_folder }}/${{ env.solution_name }}
          solution-file: ${{ env.solution_outbound_folder }}/${{ env.solution_name }}_managed.zip
          solution-type: Managed

      # - name: Step After Exporting the Unmanaged Solution
      #   run: |
      #    pac solution unpack --zipfile ${{ env.solution_outbound_folder }}/${{ env.solution_name }}_managed.zip --folder ${{ env.solution_source_folder }}/${{ env.solution_name }} --packagetype Both

      - name: Import solution as managed to uat env
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ env.BUILD_ENVIRONMENT_URL }}
          app-id: ${{ env.CLIENT_ID }}
          client-secret: ${{ env.SECRET }}
          tenant-id: ${{ env.TENANT_ID }}
          solution-file: ${{ env.solution_outbound_folder }}/${{ env.solution_name }}_managed.zip
          use-deployment-settings-file: true
          # deployment-settings-file: ${{ env.solution_source_folder }}/${{ env.solution_settings_folder }}/${{ env.UAT_solution_settings_name }}
          deployment-settings-file: settings/DeploymentSettings-UAT.json
          # stage-and-upgrade: true
          force-overwrite: true
          publish-changes: true
          run-asynchronously: true
          max-async-wait-time: 60

      - name: Set Solution Owner to Service Account
        shell: pwsh
        run: |
          Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force -AllowClobber
          Install-Module -Name Microsoft.PowerApps.PowerShell -Force -AllowClobber
      
          Add-PowerAppsAccount -Username "SVC_Agent_account_prod@s63fb.onmicrosoft.com" `
                               -Password "Tanvi@20june" 
          
          # -AsPlainText -Force
      
          $solution = Get-AdminPowerAppSolution -EnvironmentName ${{ env.BUILD_ENVIRONMENT_URL }} | Where-Object { $_.DisplayName -eq "SelfServiceAgent" }
      
          # Reassign ownership of each flow in the solution
          # $flows = Get-AdminFlow -EnvironmentName "<your-env-id>" | Where-Object { $_.SolutionId -eq $solution.SolutionId }
      
          # foreach ($flow in $flows) {
          #   Set-AdminFlowOwnerRole -EnvironmentName $flow.EnvironmentName `
          #                          -FlowName $flow.FlowName `
          #                          -PrincipalObjectId "<service-account-object-id>" `
          #                          -RoleName "Owner"
          # }

      
      # - name: Upload the ready to ship solution to GH artifact store
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ env.solution_name }}_managed
      #     path: ${{ env.solution_outbound_folder }}/

  # deploy-to-prod:
  #   needs: [deploy-to-uat]
  #   runs-on: windows-latest
  #   # or you can say runs-on: ubuntu-latest
  #   env:
  #     RUNNER_DEBUG: 1

  #   environment:
  #     name: PROD  

  #   steps:
  #     - name: Install Power Platform Tools
  #       uses: microsoft/powerplatform-actions/actions-install@v1
        
  #     - name: Debug solution steps
  #       run: 'echo "Steps for Production Deployment"'

  #     - uses: actions/checkout@v3
  #       with:
  #         lfs: true

  #     - name: who-am-i action
  #       uses: microsoft/powerplatform-actions/who-am-i@v1
  #       with:
  #         environment-url: ${{ env.BUILD_ENVIRONMENT_URL }}
  #         app-id: ${{ env.CLIENT_ID }}
  #         client-secret: ${{ env.SECRET }}
  #         tenant-id: ${{ env.TENANT_ID }}
        
  #     - name: Fetch the ready to ship solution from GH artifact store
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ env.solution_name }}_managed
  #         path: ${{ env.solution_outbound_folder }}/

      # - name: Delete old managed solution
      #   uses: microsoft/powerplatform-actions/delete-solution@v1
      #   with:
      #     environment-url: ${{ env.PROD_ENVIRONMENT_URL }}
      #     app-id: ${{ env.CLIENT_ID }}
      #     client-secret: ${{ env.SECRET }}
      #     tenant-id: ${{ env.TENANT_ID }}
      #     solution-name: ${{ env.solution_name }}    

      # - name: Import solution to prod env
      #   uses: microsoft/powerplatform-actions/import-solution@v1
      #   with:
      #     environment-url: ${{ env.PROD_ENVIRONMENT_URL }}
      #     app-id: ${{ env.CLIENT_ID }}
      #     client-secret: ${{ env.SECRET }}
      #     tenant-id: ${{ env.TENANT_ID }}
      #     solution-file: ${{ env.solution_outbound_folder }}/${{ env.solution_name }}_managed.zip
      #     use-deployment-settings-file: true
      #     # deployment-settings-file: ${{ env.solution_source_folder }}/${{ env.solution_settings_folder }}/${{ env.PROD_solution_settings_name }}
      #     deployment-settings-file: settings/DeploymentSettings-Prod.json
      #     # stage-and-upgrade: true
      #     force-overwrite: true
      #     publish-changes: true
      #     run-asynchronously: true
      #     max-async-wait-time: 60
